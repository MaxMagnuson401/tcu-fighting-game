{"version":3,"sources":["assets/raymondimage.png","stores/Models.tsx","stores/DiceReducer.tsx","Constants.tsx","components/DiceGroup.tsx","components/Dice.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Players","ActionTypes","defaultState","activePlayer","Raymond","hasWon","players","name","Robert","dice","ActionCreators","playerName","dispatch","diceValues","push","dieValue","randomInt","displayValue","xPosition","yPosition","payload","player","type","UPDATE_DICE","map","d","reduce","a","b","GAME_OVER","CHANGE_ACTIVE_PLAYER","RESET","maxValue","Math","floor","random","COLORS_MAP","backgroundColor","borderColor","PlayerContainer","styled","div","props","DiceGroup","this","isActive","colors","buttonColoring","color","onClick","Roll","disabled","React","Component","Dice","size","RandomDieContainer","StyledImage","img","Home","useSelector","state","useDispatch","p","src","raymondimage","width","App","className","Boolean","window","location","hostname","match","store","createStore","action","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c33169f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/raymondimage.bede1202.png\";","import { IDiceProps } from \"../components/Dice\";\r\n\r\nexport interface IPlayer {\r\n    name: Players;\r\n    dice: IDiceProps[];\r\n}\r\n\r\nexport enum Players {\r\n    Raymond = 'Raymond',\r\n    Robert = 'Robert',\r\n}\r\n\r\nexport interface IDiceColorProps {\r\n    backgroundColor: string;\r\n    borderColor: string;\r\n} ","import React from 'react'\r\nimport { IDiceProps } from '../components/Dice';\r\nimport { Action } from 'redux';\r\nimport { IPlayer, Players } from './Models';\r\n\r\nexport interface IDiceState {\r\n    activePlayer: Players;\r\n    hasWon: boolean;\r\n    players: IPlayer[];\r\n}\r\n\r\nexport const defaultState = {\r\n    activePlayer: Players.Raymond,\r\n    hasWon: false,\r\n    players: [\r\n        {\r\n            name: Players.Robert,\r\n            dice: [],\r\n        }, {\r\n            name: Players.Raymond,\r\n            dice: [],\r\n        }\r\n    ]\r\n}\r\n\r\nexport enum ActionTypes {\r\n    UPDATE_DICE = 'UPDATE_DICE',\r\n    CHANGE_ACTIVE_PLAYER = 'CHANGE_ACTIVE_PLAYER',\r\n    GAME_OVER = 'GAME_OVER',\r\n    RESET = 'RESET',\r\n}\r\n\r\nexport interface IUpdateDice extends Action {\r\n    type: ActionTypes.UPDATE_DICE,\r\n    payload: {dice: IDiceProps[], player: Players};\r\n}\r\nexport interface IChangeActivePlayer {\r\n    type: ActionTypes.CHANGE_ACTIVE_PLAYER,\r\n}\r\nexport interface IGameOver {\r\n    type: ActionTypes.GAME_OVER;\r\n}\r\nexport interface IReset {\r\n    type: ActionTypes.RESET;\r\n}\r\n\r\nexport const ActionCreators = {\r\n    Roll: (playerName: Players) => (dispatch: any) => {\r\n        const diceValues: IDiceProps[] = [];\r\n        diceValues.push({dieValue: randomInt(6), displayValue: 'D6', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        diceValues.push({dieValue: randomInt(6), displayValue: 'D6', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        diceValues.push({dieValue: randomInt(20), displayValue: 'D20', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        const payload = { player: playerName, dice: diceValues};\r\n        dispatch ({\r\n            type: ActionTypes.UPDATE_DICE,\r\n            payload: payload,\r\n        });\r\n        \r\n\r\n        const total = diceValues.map((d) => d.dieValue)\r\n            .reduce((a, b) => a+b);\r\n        if (total === 12) {\r\n            dispatch({type: ActionTypes.GAME_OVER});\r\n        } else {\r\n            dispatch({\r\n                type: ActionTypes.CHANGE_ACTIVE_PLAYER,\r\n            });\r\n        }\r\n    },\r\n    Reset: () => (dispatch: any) => {\r\n        dispatch({type: ActionTypes.RESET});\r\n    }\r\n}\r\n\r\nexport function randomInt(maxValue: number) {\r\n    return Math.floor(Math.random() * maxValue) + 1;\r\n}\r\n\r\nexport type acceptedActions = IUpdateDice | IChangeActivePlayer | IGameOver | IReset;\r\n\r\nexport const diceReducer = function (state: IDiceState = defaultState, action: acceptedActions) {\r\n    if (typeof state === 'undefined') {\r\n        return defaultState;\r\n    }\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_DICE:\r\n            return {\r\n                ...state,\r\n                players: [...state.players.map((p) => \r\n                    p.name === action.payload.player ?\r\n                    {...p, dice: action.payload.dice} :\r\n                    {...p}\r\n                )],\r\n            }\r\n        case ActionTypes.CHANGE_ACTIVE_PLAYER:\r\n            return {\r\n                ...state,\r\n                activePlayer: state.activePlayer === Players.Raymond ?\r\n                    Players.Robert :\r\n                    Players.Raymond\r\n            }\r\n        case ActionTypes.GAME_OVER:\r\n            return {\r\n                ...state,\r\n                hasWon: true,\r\n            }\r\n        case ActionTypes.RESET:\r\n            return {\r\n                ...defaultState,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { IDiceColorProps, Players } from './stores/Models';\r\n\r\nexport const RAYMOND_COLORS: IDiceColorProps = { backgroundColor: '#3498db', borderColor: '#1b4f72'}\r\nexport const ROBERT_COLORS: IDiceColorProps = {backgroundColor: '#FF0000', borderColor: '#8B0000'}\r\nexport const COLORS_MAP: {[player in Players]: IDiceColorProps} = {\r\n    [Players.Raymond] : RAYMOND_COLORS,\r\n    [Players.Robert] : ROBERT_COLORS,\r\n} \r\n","import React from 'react';\r\nimport { IPlayer, Players } from '../stores/Models';\r\nimport { MDBBtn } from 'mdbreact';\r\nimport styled from 'styled-components';\r\nimport { COLORS_MAP } from '../Constants';\r\n\r\ninterface IContainerProps {\r\n    borderColor: string;\r\n    backgroundColor: string;\r\n}\r\n\r\nconst PlayerContainer = styled.div`\r\n    position: relative;\r\n    border-style: solid;\r\n    border-radius: 5px;\r\n    border-color: ${(props: IContainerProps) => props.borderColor};\r\n    background-color: ${(props: IContainerProps) => props.backgroundColor}\r\n`\r\n\r\nexport interface IDiceGroupProps {\r\n    player: IPlayer;\r\n    activePlayer: Players;\r\n    hasWon: boolean;\r\n    Roll: () => void;\r\n}\r\n\r\nexport class DiceGroup extends React.Component<IDiceGroupProps> {\r\n\r\n    public render() {\r\n        const { activePlayer, player } = this.props;\r\n        const isActive = activePlayer === player.name;\r\n        const colors = COLORS_MAP[player.name];\r\n        return <>\r\n            <PlayerContainer {...colors}>\r\n                <h3>{player.name}</h3>\r\n                {/*player.dice.map((dv) => <Dice {...dv} />)*/}\r\n                {this.buttonColoring(isActive, this.props)}\r\n            </PlayerContainer>\r\n        </>;\r\n    }\r\n\r\n    private buttonColoring(isActive: boolean, props: IDiceGroupProps): any {\r\n        if (!isActive || props.hasWon) {\r\n            return <MDBBtn color='mdb-color'\r\n                onClick={() => props.Roll()}\r\n                disabled={true}>\r\n                    Roll\r\n            </MDBBtn>\r\n        } else {\r\n            return <MDBBtn color='success'\r\n                onClick={() => props.Roll()}>\r\n                    Roll\r\n            </MDBBtn>\r\n        }\r\n        \r\n    }\r\n}","import React from 'react'\r\nimport { MDBBox, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\n\r\nexport interface IDiceProps {\r\n    dieValue: number;\r\n    displayValue: string;\r\n    xPosition: number;\r\n    yPosition: number;\r\n}\r\n\r\nexport class Dice extends React.Component<IDiceProps> {\r\n\r\n    public render() {\r\n        const { displayValue, dieValue } = this.props;\r\n        return (\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size='6'>{displayValue}:</MDBCol> \r\n                        <MDBCol size='6'>\r\n                            {dieValue}\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            )\r\n    }\r\n} \r\n","import React from 'react';\r\nimport raymondimage from '../assets/raymondimage.png';\r\nimport { MDBCol, MDBRow, MDBContainer, MDBBtn } from 'mdbreact';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IDiceState, ActionCreators } from '../stores/DiceReducer';\r\nimport { DiceGroup } from './DiceGroup';\r\nimport styled from 'styled-components'\r\nimport { Dice } from './Dice';\r\nimport {COLORS_MAP} from '../Constants';\r\n\r\nexport interface IContainerProps {\r\n    xPosition: number,\r\n    yPosition: number,\r\n    borderColor: string,\r\n    backgroundColor: string,\r\n}\r\n\r\nconst RandomDieContainer = styled.div`\r\n    position: absolute;\r\n    left: ${(props: IContainerProps) => props.xPosition}px;\r\n    top: ${(props: IContainerProps) => props.yPosition}px;\r\n    z-index: 1;\r\n    border-style: solid;\r\n    border-color: ${(props: IContainerProps) => props.borderColor};\r\n    background-color: ${(props: IContainerProps) => props.backgroundColor}\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n    border: 5px solid black;\r\n    border-radius: 25px;\r\n    box-shadow: 0 0 10px #000000;\r\n`\r\n\r\nexport const Home: React.FC = () => {\r\n\r\n    const players = useSelector((state: IDiceState) => state.players);\r\n    const activePlayer = useSelector((state: IDiceState) => state.activePlayer);\r\n    const hasWon = useSelector((state: IDiceState) => state.hasWon);\r\n    const dispatch = useDispatch();\r\n\r\n    return <>\r\n        {players.map((p) => p.dice.map((d) =>\r\n            {\r\n            const colors = COLORS_MAP[p.name];\r\n            return <RandomDieContainer xPosition={d.xPosition} \r\n                yPosition={d.yPosition}\r\n                {...colors}>\r\n                    <Dice {...d}/>\r\n            </RandomDieContainer>\r\n            }\r\n        ))}\r\n        \r\n        <h1>Welcome Duelist, to the twelves world finals!</h1>\r\n\r\n        <MDBContainer>\r\n            <MDBRow>\r\n                <MDBCol size='2'>\r\n                    <DiceGroup player={players[0]} \r\n                        Roll={() => dispatch(ActionCreators.Roll(players[0].name))}\r\n                        activePlayer={activePlayer}\r\n                        hasWon={hasWon}/>\r\n                </MDBCol>\r\n                <MDBCol size='8'>\r\n                    <StyledImage src={raymondimage} width={750} />\r\n                </MDBCol>\r\n                <MDBCol size='2'>\r\n                    <DiceGroup player={players[1]} \r\n                        Roll={() => dispatch(ActionCreators.Roll(players[1].name))}\r\n                        activePlayer={activePlayer}\r\n                        hasWon={hasWon}/>\r\n                </MDBCol>\r\n            </MDBRow>\r\n            {hasWon &&\r\n            <>\r\n                <MDBRow>\r\n                    <MDBCol size='2'/>\r\n                    <MDBCol size='8'>Congratulations {activePlayer}! You have won the affection of your brother.</MDBCol>\r\n                    <MDBCol size='2'/>\r\n                </MDBRow>\r\n                <MDBBtn onClick={() => dispatch(ActionCreators.Reset())}>Reset Game</MDBBtn>\r\n            </>\r\n            }\r\n        </MDBContainer>\r\n    </>\r\n}","import '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport React from 'react';\nimport './App.css';\nimport { Home } from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { defaultState, diceReducer } from './stores/DiceReducer';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(diceReducer, defaultState, applyMiddleware(thunk));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}