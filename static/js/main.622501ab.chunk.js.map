{"version":3,"sources":["assets/raymondimage.png","assets/raymond.png","assets/robert.png","assets/booze.png","assets/debra.jpg","assets/lenny.png","assets/setokaiba.jpg","assets/teferi.png","assets/yamiyugi.jpg","stores/Models.tsx","assets/assets.tsx","Constants.tsx","components/FighterPortrait.tsx","stores/DiceReducer.tsx","stores/FighterSelectionStore.tsx","components/FighterSidePanel.tsx","components/FighterSelectionPage.tsx","components/DiceGroup.tsx","components/Dice.tsx","components/BattleScreen.tsx","components/Home.tsx","App.tsx","serviceWorker.ts","stores/Index.tsx","index.tsx"],"names":["module","exports","Fighters","PlayerControl","PlayerNumber","Page","fighterImages","Raymond","require","Robert","Booze","Debra","Lenny","Kaiba","Teferi","Yugi","COLORS_MAP","PlayerOne","backgroundColor","borderColor","portraitColor","PlayerTwo","ActionTypes","PortraitContainer","styled","div","StyledImage","img","props","FighterPortrait","this","imageSource","chosenBy","onClick","SelectFighter","src","React","Component","defaultState","activePlayer","hasWon","fighters","name","controller","Player","playerNumber","dice","ActionCreators","Roll","playerName","dispatch","getState","diceValues","push","dieValue","randomInt","displayValue","xPosition","yPosition","payload","player","type","UPDATE_DICE","map","d","reduce","a","b","GAME_OVER","nextActivePlayer","find","p","CPU","CHANGE_ACTIVE_PLAYER","Reset","RESET","SetPlayerControl","SET_PLAYER_CONTROL","maxValue","Math","floor","random","defaultFighterState","currentScreen","CharacterSelection","fighterSelections","fighter","SELECT_FIGHTER","page","firstFighter","f","secondFighter","BattleScreenActions","LOAD_SELECTION_DATA","CHANGE_SCREENS","FighterSidePanel","fighterName","isLockedIn","LockIn","width","height","disabled","FighterContainer","BlockContainer","FighterSelectionPage","useSelector","state","useDispatch","undefined","BattleScreen","PlayerContainer","Portrait","DiceGroup","isActive","colors","buttonColoring","checked","label","id","containerClass","color","Dice","size","RandomDieContainer","raymondimage","Home","currentPage","App","className","Boolean","window","location","hostname","match","combineReducers","action","playerOne","playerTwo","newFighters","fighterData","combinedDefaultState","store","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.622501ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/raymondimage.bede1202.png\";","module.exports = __webpack_public_path__ + \"static/media/raymond.dbafa5fa.png\";","module.exports = __webpack_public_path__ + \"static/media/robert.2e636add.png\";","module.exports = __webpack_public_path__ + \"static/media/booze.8e7c7533.png\";","module.exports = __webpack_public_path__ + \"static/media/debra.aa7636f3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lenny.645984df.png\";","module.exports = __webpack_public_path__ + \"static/media/setokaiba.58a950ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/teferi.3c44027f.png\";","module.exports = __webpack_public_path__ + \"static/media/yamiyugi.179f040a.jpg\";","import { IDiceProps } from \"../components/Dice\";\r\n\r\nexport interface IFighter {\r\n    name: Fighters;\r\n    controller: PlayerControl;\r\n    playerNumber: PlayerNumber;\r\n    dice: IDiceProps[];\r\n}\r\n\r\nexport enum Fighters {\r\n    Raymond = 'Raymond',\r\n    Robert = 'Robert',\r\n    Debra = 'Debra',\r\n    Lenny = 'Lenny',\r\n    Kaiba = 'Kaiba',\r\n    Yugi = 'Yugi',\r\n    Teferi = 'Teferi',\r\n    Booze = 'Booze',\r\n}\r\n\r\nexport enum PlayerControl {\r\n    Player = 'Player',\r\n    CPU = 'CPU',\r\n}\r\n\r\nexport interface IDiceColorProps {\r\n    backgroundColor: string;\r\n    borderColor: string;\r\n    portraitColor: string;\r\n}\r\n\r\nexport interface IFighterSelection {\r\n    name: Fighters;\r\n    chosenBy?: PlayerNumber;\r\n}\r\n\r\nexport enum PlayerNumber {\r\n    PlayerOne = 'PlayerOne',\r\n    PlayerTwo = 'PlayerTwo',\r\n}\r\n\r\nexport enum Page {\r\n    CharacterSelection = 'Character Seletion',\r\n    BattleScreen = 'Battle Screen',\r\n}\r\n","import { Fighters } from '../stores/Models'\r\n\r\nexport const fighterImages = {\r\n    [Fighters.Raymond]: require('./raymond.png'),\r\n    [Fighters.Robert]: require('./robert.png'),\r\n    [Fighters.Booze]: require('./booze.png'),\r\n    [Fighters.Debra]: require('./debra.jpg'),\r\n    [Fighters.Lenny]: require('./lenny.png'),\r\n    [Fighters.Kaiba]: require('./setokaiba.jpg'),\r\n    [Fighters.Teferi]: require('./teferi.png'),\r\n    [Fighters.Yugi]: require('./yamiyugi.jpg'),\r\n}","import { IDiceColorProps, Fighters, PlayerNumber } from './stores/Models';\r\n\r\nexport const PLAYER_ONE_COLORS: IDiceColorProps = { \r\n    backgroundColor: '#3498db', \r\n    borderColor: '#1b4f72',\r\n    portraitColor: '#1b4f72',\r\n}\r\nexport const PLAYER_TWO_COLORS: IDiceColorProps = {\r\n    backgroundColor: '#FF0000', \r\n    borderColor: '#8B0000',\r\n    portraitColor: '#8B0000'\r\n}\r\nexport const COLORS_MAP: {[player in PlayerNumber]: IDiceColorProps} = {\r\n    [PlayerNumber.PlayerOne] : PLAYER_ONE_COLORS,\r\n    [PlayerNumber.PlayerTwo] : PLAYER_TWO_COLORS,\r\n} \r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { COLORS_MAP } from '../Constants';\r\nimport { PlayerNumber } from '../stores/Models';\r\n\r\nconst PortraitContainer = styled.div`\r\n    width: 80px;\r\n    height: 80px;\r\n`\r\n\r\nexport interface IImageProps {\r\n    borderColor: string;\r\n}\r\n\r\nconst StyledImage = styled.img`\r\n    border: 5px solid ${(props: IImageProps) => props.borderColor};\r\n    height: 75px;\r\n    width: 75px;\r\n`;\r\n\r\nexport interface IFighterPortraitProps {\r\n    imageSource: string;\r\n    chosenBy?: PlayerNumber;\r\n    SelectFighter: () => void;\r\n}\r\n\r\nexport class FighterPortrait extends React.Component<IFighterPortraitProps> {\r\n\r\n    public render() {\r\n        const { imageSource, chosenBy } = this.props;\r\n        return <>\r\n            <PortraitContainer onClick={() => this.props.SelectFighter()}>\r\n                <StyledImage borderColor={chosenBy ? COLORS_MAP[chosenBy].borderColor : 'black'} \r\n                    src={imageSource} />\r\n            </PortraitContainer>\r\n        </>;\r\n    }\r\n}","import { IDiceProps } from '../components/Dice';\r\nimport { Action } from 'redux';\r\nimport { IFighter, Fighters, PlayerControl, PlayerNumber, IFighterSelection } from './Models';\r\n\r\nexport interface IDiceState {\r\n    activePlayer: Fighters;\r\n    hasWon: boolean;\r\n    fighters: IFighter[];\r\n}\r\n\r\nexport const defaultState: IDiceState = {\r\n    activePlayer: Fighters.Raymond,\r\n    hasWon: false,\r\n    fighters: [\r\n        {\r\n            name: Fighters.Robert,\r\n            controller: PlayerControl.Player,\r\n            playerNumber: PlayerNumber.PlayerOne,\r\n            dice: [],\r\n        }, {\r\n            name: Fighters.Raymond,\r\n            controller: PlayerControl.Player,\r\n            playerNumber: PlayerNumber.PlayerTwo,\r\n            dice: [],\r\n        }\r\n    ]\r\n}\r\n\r\nexport enum ActionTypes {\r\n    UPDATE_DICE = 'UPDATE_DICE',\r\n    CHANGE_ACTIVE_PLAYER = 'CHANGE_ACTIVE_PLAYER',\r\n    GAME_OVER = 'GAME_OVER',\r\n    RESET = 'RESET',\r\n    SET_PLAYER_CONTROL = 'SET_PLAYER_CONTROL',\r\n    LOAD_SELECTION_DATA = 'LOAD_SELECTION_DATA',\r\n}\r\n\r\nexport interface IUpdateDice extends Action {\r\n    type: ActionTypes.UPDATE_DICE,\r\n    payload: {dice: IDiceProps[], player: Fighters};\r\n}\r\nexport interface IChangeActivePlayer {\r\n    type: ActionTypes.CHANGE_ACTIVE_PLAYER,\r\n}\r\nexport interface IGameOver {\r\n    type: ActionTypes.GAME_OVER;\r\n}\r\nexport interface IReset {\r\n    type: ActionTypes.RESET;\r\n}\r\nexport interface ISetPlayerControl {\r\n    type: ActionTypes.SET_PLAYER_CONTROL;\r\n    payload: { player: Fighters, controller: PlayerControl};\r\n}\r\nexport interface ILoadSelectionData {\r\n    type: ActionTypes.LOAD_SELECTION_DATA;\r\n    payload: IFighterSelection[];\r\n}\r\n\r\nexport const ActionCreators = {\r\n    Roll: (playerName: Fighters) => (dispatch: any, getState: any) => {\r\n        const diceValues: IDiceProps[] = [];\r\n        diceValues.push({dieValue: randomInt(6), displayValue: 'D6', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        diceValues.push({dieValue: randomInt(6), displayValue: 'D6', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        diceValues.push({dieValue: randomInt(20), displayValue: 'D20', xPosition: randomInt(800), yPosition: randomInt(600)});\r\n        const payload = { player: playerName, dice: diceValues};\r\n        dispatch ({\r\n            type: ActionTypes.UPDATE_DICE,\r\n            payload: payload,\r\n        });\r\n        \r\n\r\n        const total = diceValues.map((d) => d.dieValue)\r\n            .reduce((a, b) => a+b);\r\n        if (total === 12) {\r\n            dispatch({type: ActionTypes.GAME_OVER});\r\n        } else {\r\n            const nextActivePlayer = getState().dice.fighters.find((p: IFighter) => p.name !== playerName);\r\n            if (nextActivePlayer && nextActivePlayer.controller === PlayerControl.CPU) {\r\n                dispatch(ActionCreators.Roll(nextActivePlayer.name));\r\n            }\r\n            dispatch({\r\n                type: ActionTypes.CHANGE_ACTIVE_PLAYER,\r\n            });\r\n        }\r\n    },\r\n    Reset: () => (dispatch: any) => {\r\n        dispatch({type: ActionTypes.RESET});\r\n    },\r\n    SetPlayerControl: (player: Fighters, controller: PlayerControl) => (dispatch: any) => {\r\n        dispatch({\r\n            type: ActionTypes.SET_PLAYER_CONTROL,\r\n            payload: {player, controller},\r\n        });\r\n    },\r\n}\r\n\r\nexport function randomInt(maxValue: number) {\r\n    return Math.floor(Math.random() * maxValue) + 1;\r\n}\r\n\r\nexport type BattleScreenActions = IUpdateDice | \r\n    IChangeActivePlayer | \r\n    IGameOver | \r\n    IReset| \r\n    ISetPlayerControl |\r\n    ILoadSelectionData;\r\n\r\nexport const diceReducer = function (state: IDiceState = defaultState, action: BattleScreenActions) {\r\n    if (typeof state === 'undefined') {\r\n        return defaultState;\r\n    }\r\n    switch (action.type) {\r\n        case ActionTypes.UPDATE_DICE:\r\n            return {\r\n                ...state,\r\n                fighters: [...state.fighters.map((p) => \r\n                    p.name === action.payload.player ?\r\n                    {...p, dice: action.payload.dice} :\r\n                    {...p}\r\n                )],\r\n            }\r\n        case ActionTypes.CHANGE_ACTIVE_PLAYER:\r\n            const playerOne = state.fighters[0].name;\r\n            const playerTwo = state.fighters[1].name;\r\n            return {\r\n                ...state,\r\n                activePlayer: state.activePlayer === playerOne ?\r\n                    playerTwo :\r\n                    playerOne\r\n            }\r\n        case ActionTypes.GAME_OVER:\r\n            return {\r\n                ...state,\r\n                hasWon: true,\r\n            }\r\n        case ActionTypes.RESET:\r\n            return {\r\n                ...defaultState,\r\n            }\r\n        case ActionTypes.SET_PLAYER_CONTROL:\r\n            return {\r\n                ...state, \r\n                fighters: state.fighters.map((p) => {\r\n                    return p.name === action.payload.player ?\r\n                        {...p, controller: action.payload.controller} :\r\n                        {...p}\r\n                })\r\n            }\r\n        case ActionTypes.LOAD_SELECTION_DATA:\r\n            const newFighters: IFighter[] = state.fighters.map((f) => {\r\n                const fighterData = action.payload.find((p) => p.chosenBy === f.playerNumber);\r\n                 return fighterData ? \r\n                    {...f, name: fighterData.name} :\r\n                    {...f}\r\n            });\r\n            const activePlayer = action.payload.find((f) => f.chosenBy === PlayerNumber.PlayerOne);\r\n\r\n            return {...state,\r\n                fighters: [...newFighters],\r\n                activePlayer: activePlayer ? activePlayer.name : state.activePlayer,\r\n            }\r\n            \r\n        default:\r\n            return {...state};\r\n    }\r\n}","import { IFighterSelection, Fighters, PlayerNumber, Page } from \"./Models\";\r\nimport { Action } from \"redux\";\r\nimport {ActionTypes as BattleScreenActions} from './DiceReducer';\r\n\r\nexport interface IFighterSelectionState {\r\n    activePlayer: PlayerNumber,\r\n    currentScreen: Page,\r\n    fighterSelections: IFighterSelection[];\r\n}\r\n\r\nexport const defaultFighterState: IFighterSelectionState = {\r\n    activePlayer: PlayerNumber.PlayerOne,\r\n    currentScreen: Page.CharacterSelection,\r\n    fighterSelections: [\r\n        {name: Fighters.Raymond},\r\n        {name: Fighters.Robert},\r\n        {name: Fighters.Yugi},\r\n        {name: Fighters.Teferi},\r\n        {name: Fighters.Lenny},\r\n        {name: Fighters.Kaiba},\r\n        {name: Fighters.Debra},\r\n        {name: Fighters.Booze},\r\n    ],\r\n}\r\n\r\nexport enum ActionTypes {\r\n    SELECT_FIGHTER = 'SELECT_FIGHTER',\r\n    CHANGE_ACTIVE_PLAYER = 'CHANGE_ACTIVE_PLAYER',\r\n    CHANGE_SCREENS = 'CHANGE_SCREENS',\r\n}\r\n\r\nexport interface ISelectFighter extends Action {\r\n    type: ActionTypes.SELECT_FIGHTER,\r\n    payload: {fighter: Fighters, playerNumber: PlayerNumber},\r\n}\r\nexport interface IChangeActivePlayer extends Action {\r\n    type: ActionTypes.CHANGE_ACTIVE_PLAYER;\r\n    payload: PlayerNumber;\r\n}\r\nexport interface IChangeScreens extends Action {\r\n    type: ActionTypes.CHANGE_SCREENS;\r\n    payload: Page;\r\n}\r\n\r\nexport const ActionCreators = {\r\n    SelectFighter: (fighter: Fighters, playerNumber: PlayerNumber) => (dispatch: any) => {\r\n        dispatch({\r\n            type: ActionTypes.SELECT_FIGHTER,\r\n            payload: {fighter, playerNumber},\r\n        });\r\n    },\r\n    ChangeActivePlayer: (player: PlayerNumber) => (dispatch: any) => {\r\n        dispatch({\r\n            type: ActionTypes.CHANGE_ACTIVE_PLAYER,\r\n            payload: player,\r\n        });\r\n    },\r\n    ChangeScreens: (page: Page) => (dispatch: any, getState: any) => {\r\n        const fighters = [...getState().fighter.fighterSelections];\r\n        const firstFighter = fighters.find((f: IFighterSelection) => \r\n            f.chosenBy === PlayerNumber.PlayerOne);\r\n        const secondFighter = fighters.find((f: IFighterSelection) => \r\n            f.chosenBy === PlayerNumber.PlayerTwo);\r\n        dispatch({\r\n            type: BattleScreenActions.LOAD_SELECTION_DATA,\r\n            payload: [firstFighter, secondFighter],\r\n        });\r\n        dispatch({\r\n            type: ActionTypes.CHANGE_SCREENS,\r\n            payload: page,\r\n        });\r\n    },\r\n}\r\n\r\ntype FighterSelectionActions = ISelectFighter  | IChangeActivePlayer | IChangeScreens;\r\n\r\nexport const FighterSelectionReducer = \r\n    function (state: IFighterSelectionState = defaultFighterState, action: FighterSelectionActions) {\r\n        if (typeof state === 'undefined') {\r\n            return defaultFighterState;\r\n        }\r\n        switch(action.type) {\r\n            case ActionTypes.SELECT_FIGHTER:\r\n                return {...state,\r\n                    fighterSelections: [...state.fighterSelections.map((f: IFighterSelection) =>\r\n                        f.name === action.payload.fighter ?\r\n                            {...f, chosenBy: f.chosenBy ? undefined: action.payload.playerNumber} :\r\n                            {...f, chosenBy: f.chosenBy === action.payload.playerNumber ? undefined : f.chosenBy}\r\n                    )],\r\n                }\r\n            case ActionTypes.CHANGE_ACTIVE_PLAYER:\r\n                return {...state,\r\n                    activePlayer: action.payload,\r\n                }\r\n            case ActionTypes.CHANGE_SCREENS:\r\n                return {...state,\r\n                    currentScreen: action.payload,\r\n                }\r\n\r\n            default:\r\n                return {...state};\r\n        }\r\n    }","import React from 'react';\r\nimport { Fighters } from '../stores/Models';\r\nimport { fighterImages } from '../assets/assets';\r\n\r\nexport interface IFighterSidePanelProps {\r\n    fighterName?: Fighters;\r\n    isLockedIn: boolean;\r\n    LockIn: () => void;\r\n}\r\n\r\nexport class FighterSidePanel extends React.Component<IFighterSidePanelProps> {\r\n\r\n    public render() {\r\n        const { fighterName, isLockedIn, LockIn } = this.props;\r\n        \r\n        return <>\r\n            {fighterName && fighterName}\r\n            {fighterName && <img src={fighterImages[fighterName]} width={75} height={75} />}\r\n            <button onClick={() => LockIn()} disabled={isLockedIn}>Lock in Selection</button>\r\n        </>;\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Page, PlayerNumber } from '../stores/Models';\r\nimport { fighterImages } from '../assets/assets';\r\nimport { FighterPortrait } from './FighterPortrait';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { IApplicationState } from '..';\r\nimport { ActionCreators } from '../stores/FighterSelectionStore';\r\nimport { MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\nimport { FighterSidePanel } from './FighterSidePanel';\r\n\r\nconst FighterContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: auto auto auto auto;\r\n    background-color: #696969;\r\n    padding: 2px;\r\n    width: 325px;\r\n`;\r\n\r\nconst BlockContainer = styled.div`\r\n    display: inline-block;\r\n`;\r\n\r\nexport const FighterSelectionPage: React.FC = () => {\r\n\r\n    const fighters = useSelector((state: IApplicationState) => state.fighter.fighterSelections);\r\n    const activePlayer = useSelector((state: IApplicationState) => state.fighter.activePlayer);\r\n    const dispatch = useDispatch();\r\n\r\n    const firstFighter = fighters.find((f) => f.chosenBy === PlayerNumber.PlayerOne);\r\n    const secondFighter = fighters.find((f) => f.chosenBy === PlayerNumber.PlayerTwo);\r\n\r\n    return <>\r\n        <div>\r\n            <BlockContainer>\r\n                <FighterSidePanel \r\n                    fighterName={firstFighter ? firstFighter.name : undefined} \r\n                    LockIn={() => dispatch(ActionCreators.ChangeActivePlayer(PlayerNumber.PlayerTwo))}\r\n                    isLockedIn={activePlayer === PlayerNumber.PlayerTwo} />\r\n            </BlockContainer>\r\n            <BlockContainer>\r\n                <FighterContainer>\r\n                    {fighters.map((f) => <FighterPortrait imageSource={fighterImages[f.name]} \r\n                        SelectFighter={() => dispatch(ActionCreators.SelectFighter(f.name, activePlayer))} \r\n                        chosenBy={f.chosenBy}/>)}\r\n                </FighterContainer>\r\n            </BlockContainer>\r\n            <BlockContainer>\r\n                <FighterSidePanel \r\n                    fighterName={secondFighter ? secondFighter.name : undefined}\r\n                    LockIn={() => dispatch(ActionCreators.ChangeScreens(Page.BattleScreen))}\r\n                    isLockedIn={activePlayer === PlayerNumber.PlayerOne || !secondFighter} />\r\n            </BlockContainer>\r\n        </div>\r\n    </>;\r\n}","import React from 'react';\r\nimport { IFighter, Fighters, PlayerControl } from '../stores/Models';\r\nimport { MDBBtn, MDBFormInline, MDBInput } from 'mdbreact';\r\nimport styled from 'styled-components';\r\nimport { COLORS_MAP } from '../Constants';\r\nimport { fighterImages } from '../assets/assets';\r\n\r\ninterface IContainerProps {\r\n    borderColor: string;\r\n    backgroundColor: string;\r\n}\r\n\r\nconst PlayerContainer = styled.div`\r\n    position: relative;\r\n    border-style: solid;\r\n    border-radius: 5px;\r\n    border-color: ${(props: IContainerProps) => props.borderColor};\r\n    background-color: ${(props: IContainerProps) => props.backgroundColor}\r\n`\r\n\r\nconst Portrait = styled.img`\r\n    border-style: solid;\r\n    border-color: black;\r\n    width: 75px;\r\n    height: 75px;\r\n`;\r\n\r\nexport interface IDiceGroupProps {\r\n    player: IFighter;\r\n    activePlayer: Fighters;\r\n    hasWon: boolean;\r\n    Roll: () => void;\r\n    SetPlayerControl: (player: Fighters, controller: PlayerControl) => void;\r\n}\r\n\r\nexport class DiceGroup extends React.Component<IDiceGroupProps> {\r\n\r\n    public render() {\r\n        const { activePlayer, player, SetPlayerControl } = this.props;\r\n        const isActive = activePlayer === player.name;\r\n        const colors = COLORS_MAP[player.playerNumber];\r\n        return <>\r\n            <PlayerContainer {...colors}>\r\n                <h3>{player.name}</h3>\r\n                <Portrait src={fighterImages[player.name]} />\r\n                {this.buttonColoring(isActive, this.props)}\r\n                <MDBFormInline>\r\n                    <MDBInput\r\n                        onClick={() => SetPlayerControl(player.name, PlayerControl.Player)}\r\n                        checked={player.controller === PlayerControl.Player}\r\n                        label='Player'\r\n                        type='radio'\r\n                        id='radio1'\r\n                        containerClass='mr-5'\r\n                    />\r\n                    <MDBInput\r\n                        onClick={() => SetPlayerControl(player.name, PlayerControl.CPU)}\r\n                        checked={player.controller === PlayerControl.CPU}\r\n                        label='CPU '\r\n                        type='radio'\r\n                        id='radio2'\r\n                        containerClass='mr-5'\r\n                    />\r\n                </MDBFormInline>\r\n            </PlayerContainer>\r\n        </>;\r\n    }\r\n\r\n    private buttonColoring(isActive: boolean, props: IDiceGroupProps): any {\r\n        if (!isActive || props.hasWon) {\r\n            return <MDBBtn color='mdb-color'\r\n                onClick={() => props.Roll()}\r\n                disabled={true}>\r\n                    Roll\r\n            </MDBBtn>\r\n        } else {\r\n            return <MDBBtn color='success'\r\n                onClick={() => props.Roll()}>\r\n                    Roll\r\n            </MDBBtn>\r\n        }\r\n        \r\n    }\r\n}","import React from 'react'\r\nimport { MDBBox, MDBContainer, MDBRow, MDBCol } from 'mdbreact';\r\n\r\nexport interface IDiceProps {\r\n    dieValue: number;\r\n    displayValue: string;\r\n    xPosition: number;\r\n    yPosition: number;\r\n}\r\n\r\nexport class Dice extends React.Component<IDiceProps> {\r\n\r\n    public render() {\r\n        const { displayValue, dieValue } = this.props;\r\n        return (\r\n                <MDBContainer>\r\n                    <MDBRow>\r\n                        <MDBCol size='6'>{displayValue}:</MDBCol> \r\n                        <MDBCol size='6'>\r\n                            {dieValue}\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n            )\r\n    }\r\n} \r\n","import React from 'react';\r\nimport raymondimage from '../assets/raymondimage.png';\r\nimport { MDBCol, MDBRow, MDBContainer, MDBBtn } from 'mdbreact';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ActionCreators } from '../stores/DiceReducer';\r\nimport { DiceGroup } from './DiceGroup';\r\nimport styled from 'styled-components'\r\nimport { Dice } from './Dice';\r\nimport {COLORS_MAP} from '../Constants';\r\nimport { IApplicationState } from '..';\r\n\r\nexport interface IContainerProps {\r\n    xPosition: number,\r\n    yPosition: number,\r\n    borderColor: string,\r\n    backgroundColor: string,\r\n}\r\n\r\nconst RandomDieContainer = styled.div`\r\n    position: absolute;\r\n    left: ${(props: IContainerProps) => props.xPosition}px;\r\n    top: ${(props: IContainerProps) => props.yPosition}px;\r\n    z-index: 1;\r\n    border-style: solid;\r\n    border-color: ${(props: IContainerProps) => props.borderColor};\r\n    background-color: ${(props: IContainerProps) => props.backgroundColor}\r\n`\r\n\r\nconst StyledImage = styled.img`\r\n    border: 5px solid black;\r\n    border-radius: 25px;\r\n    box-shadow: 0 0 10px #000000;\r\n`\r\n\r\nexport const BattleScreen: React.FC = () => {\r\n\r\n    const fighters = useSelector((state: IApplicationState) => state.dice.fighters);\r\n    const activePlayer = useSelector((state: IApplicationState) => state.dice.activePlayer);\r\n    const hasWon = useSelector((state: IApplicationState) => state.dice.hasWon);\r\n    const dispatch = useDispatch();\r\n\r\n    return <>\r\n        {fighters.map((p) => p.dice.map((d) =>\r\n            {\r\n            const colors = COLORS_MAP[p.playerNumber];\r\n            return <RandomDieContainer xPosition={d.xPosition} \r\n                yPosition={d.yPosition}\r\n                {...colors}>\r\n                    <Dice {...d}/>\r\n            </RandomDieContainer>\r\n            }\r\n        ))}\r\n        \r\n        <h1>Welcome Duelist, to the twelves world finals!</h1>\r\n\r\n        <MDBContainer>\r\n            <MDBRow>\r\n                <MDBCol size='2'>\r\n                    <DiceGroup player={fighters[0]} \r\n                        Roll={() => dispatch(ActionCreators.Roll(fighters[0].name))}\r\n                        SetPlayerControl={(player, controller) => \r\n                            dispatch(ActionCreators.SetPlayerControl(player, controller))}\r\n                        activePlayer={activePlayer}\r\n                        hasWon={hasWon}/>\r\n                </MDBCol>\r\n                <MDBCol size='8'>\r\n                    <StyledImage src={raymondimage} width={750} />\r\n                </MDBCol>\r\n                <MDBCol size='2'>\r\n                    <DiceGroup player={fighters[1]} \r\n                        Roll={() => dispatch(ActionCreators.Roll(fighters[1].name))}\r\n                        SetPlayerControl={(player, controller) => \r\n                            dispatch(ActionCreators.SetPlayerControl(player, controller))}\r\n                        activePlayer={activePlayer}\r\n                        hasWon={hasWon}/>\r\n                </MDBCol>\r\n            </MDBRow>\r\n            {hasWon &&\r\n            <>\r\n                <MDBRow>\r\n                    <MDBCol size='2'/>\r\n                    <MDBCol size='8'>Congratulations {activePlayer}! You have won the affection of your brother.</MDBCol>\r\n                    <MDBCol size='2'/>\r\n                </MDBRow>\r\n                <MDBBtn onClick={() => dispatch(ActionCreators.Reset())}>Reset Game</MDBBtn>\r\n            </>\r\n            }\r\n        </MDBContainer>\r\n    </>\r\n}","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { IApplicationState } from '..';\r\nimport { Page } from '../stores/Models';\r\nimport { FighterSelectionPage } from './FighterSelectionPage';\r\nimport { BattleScreen } from './BattleScreen';\r\n\r\n\r\nexport const Home: React.FC = () => {\r\n\r\n    const currentPage = useSelector((state: IApplicationState) => state.fighter.currentScreen);\r\n   \r\n    return <>\r\n        {currentPage === Page.CharacterSelection ? <FighterSelectionPage /> : <BattleScreen />}\r\n    </>\r\n}","import '@fortawesome/fontawesome-free/css/all.min.css'; \nimport 'bootstrap-css-only/css/bootstrap.min.css'; \nimport 'mdbreact/dist/css/mdb.css';\nimport React from 'react';\nimport './App.css';\nimport { Home } from './components/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Home />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { diceReducer } from './DiceReducer';\r\nimport { FighterSelectionReducer } from './FighterSelectionStore';\r\n\r\n\r\nexport default combineReducers({\r\n    dice: diceReducer,\r\n    fighter: FighterSelectionReducer,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { defaultState, diceReducer, IDiceState } from './stores/DiceReducer';\nimport { defaultFighterState, FighterSelectionReducer, IFighterSelectionState } from './stores/FighterSelectionStore';\nimport reducer from './stores/Index';\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nexport interface IApplicationState {\n  dice: IDiceState,\n  fighter: IFighterSelectionState,\n} \n\nconst combinedDefaultState: IApplicationState = {\n  dice: defaultState,\n  fighter: defaultFighterState,\n}\n\nconst store = createStore(reducer, \n  combinedDefaultState, \n  composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}